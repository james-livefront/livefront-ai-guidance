#!/bin/bash

# Pre-commit hook: Lint markdown and auto-bump version

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Get list of staged markdown files
STAGED_MD_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.md$')

# Lint markdown files if any are staged
if [ -n "$STAGED_MD_FILES" ]; then
    echo -e "${YELLOW}Linting staged Markdown files...${NC}"
    
    for file in $STAGED_MD_FILES; do
        npx markdownlint-cli2 "$file"
        if [ $? -ne 0 ]; then
            echo -e "${RED}✗ Markdown linting failed for $file${NC}"
            echo -e "${YELLOW}Fix the issues or run: git commit --no-verify${NC}"
            exit 1
        fi
    done
    
    echo -e "${GREEN}✓ All Markdown files passed linting${NC}"
fi

# Check if README.md or any core guide files are being modified
GUIDE_FILES=$(git diff --cached --name-only | grep -E '(README\.md|0[1-6]-.*\.md)')

if [ -n "$GUIDE_FILES" ]; then
    # Get the commit message from .git/COMMIT_EDITMSG if it exists
    COMMIT_MSG=""
    if [ -f ".git/COMMIT_EDITMSG" ]; then
        COMMIT_MSG=$(cat .git/COMMIT_EDITMSG | head -n1)
    fi
    
    # Check for version bump indicators
    if echo "$COMMIT_MSG" | grep -qiE '\[(major|minor|patch|breaking|feature|fix)\]'; then
        echo -e "${YELLOW}Version bump detected, will update after commit...${NC}"
    else
        echo -e "${YELLOW}Tip: Add [major], [minor], or [patch] to commit message for auto-versioning${NC}"
    fi
fi

exit 0
